{"changed":true,"filter":false,"title":"bone.js","tooltip":"/node_modules/octalbonescript/lib/bone.js","value":"// Copyright (C) 2013 - Texas Instruments, Jason Kridner\n//\n// This is meant to hold some private functions\n// Modified by Aditya Patadia, Octal Consulting LLP\nvar fs = require('fs');\nvar debug = require('debug')('bone');\nvar child_process = require('child_process');\nvar pinmap = require('./pinmap');\nvar g = require('./constants');\nvar verror = require(\"verror\");\nvar exec = require('shelljs').exec;\n\nvar sysfsFiles = {};\n\nfunction boneRequire(packageName, onfail) {\n    var y = {};\n    try {\n        y = require(packageName);\n        y.exists = true;\n    } catch (ex) {\n        y.exists = false;\n        err = new verror(\"Optional package '%s' not loaded\", packageName);\n        console.error(err.message);\n        if (onfail) onfail();\n    }\n    return (y);\n}\n\nmodule.exports = {\n\n    require: boneRequire,\n\n    getpin: function(pin) {\n        if (typeof pin == 'object') return (pin);\n        else if (typeof pin == 'string' && pinmap[pin]) {\n            if (pinmap[pin].exists) {\n                return (pinmap[pin]);\n            } else {\n                var p = pinmap[pin].key + \"_pinmux\";\n                var path = module.exports.find_sysfsFile(p, module.exports.is_ocp(), p + '.');\n                if (fs.existsSync(path + \"/state\") ||\n                    typeof pinmap[pin].ain != 'undefined' ||\n                    typeof pinmap[pin].led != 'undefined') {\n                    pinmap[pin].exists = true;\n                    return pinmap[pin];\n                } else {\n                    throw new verror(\"The pin \" + pinmap[pin].key + \" is not availble to write. \" +\n                        \"Please make sure it is not used by another cape.\");\n                }\n            }\n        } else throw new verror(\"Invalid pin: \" + pin);\n    },\n\n    is_capemgr: function(callback) {\n        return (module.exports.find_sysfsFile('capemgr', '/sys/devices', 'bone_capemgr.', callback));\n    },\n\n    is_ocp: function(callback) {\n        return (module.exports.find_sysfsFile('ocp', '/sys/devices', 'ocp.', callback));\n    },\n\n    is_cape_universal: function(callback) {\n        var ocp = module.exports.is_ocp();\n        debug('is_ocp() = ' + ocp);\n        var cape_universal = module.exports.find_sysfsFile('cape-universal', ocp, 'cape-universal.', callback);\n        debug('is_cape_universal() = ' + cape_universal);\n        return (cape_universal);\n    },\n\n    is_hdmi_enable: function() {\n        var ocp = module.exports.is_ocp();\n        return (module.exports.find_sysfsFile('hdmi', ocp, 'hdmi.'));\n    },\n\n    is_audio_enable: function() {\n        var ocp = module.exports.is_ocp();\n        return (module.exports.find_sysfsFile('sound', ocp, 'sound.'));\n    },\n\n    find_sysfsFile: function(name, path, prefix, callback) {\n        if (typeof sysfsFiles[name] == 'undefined') {\n            if (callback) {\n                module.exports.file_find(path, prefix, onFindFile);\n            } else {\n                sysfsFiles[name] = module.exports.file_find(path, prefix);\n            }\n        } else {\n            if (callback) callback(null, {\n                path: sysfsFiles[name]\n            });\n        }\n\n        function onFindFile(err, resp) {\n            if (err) {\n                callback(err, null);\n            } else {\n                sysfsFiles[name] = resp.path;\n                callback(null, resp);\n            }\n        }\n\n        return (sysfsFiles[name]);\n    },\n\n    file_find: function(path, prefix, callback) {\n        var resp = {\n            path: null\n        };\n\n        if (callback) {\n            fs.readdir(path, onReadDir);\n        } else {\n            try {\n                var files = fs.readdirSync(path);\n                onReadDir(null, files);\n            } catch (ex) {\n                console.error('Error reading directory ' + path);\n            }\n            return (resp.path);\n        }\n\n        function onReadDir(err, files) {\n            if (err) {\n                err = verror(err, 'Error listing directory %s', path);\n                if (callback) callback(err, null);\n                return;\n            }\n            for (var j in files) {\n                if (files[j].indexOf(prefix) === 0) {\n                    resp.path = path + '/' + files[j];\n                    if (callback) callback(null, resp);\n                    return;\n                }\n            }\n            if (resp.path === null && callback) {\n                callback(null, resp);\n            }\n        }\n    },\n\n    create_dt_sync: function(template, load, force_create) {\n        debug('create_dt_sync(' + [template, load, force_create] + ')');\n        load = (typeof load === 'undefined') ? true : load;\n        var dtsFilename = '/lib/firmware/' + template + '-00A0.dts';\n        var dtboFilename = '/lib/firmware/' + template + '-00A0.dtbo';\n\n        if (force_create) {\n            createDTS();\n        } else {\n            var exists = fs.existsSync(dtboFilename);\n            onDTBOExistsTest(exists);\n        }\n\n        function onDTBOExistsTest(exists) {\n            if (exists) {\n                onDTBOExists();\n            } else {\n                createDTS();\n            }\n        }\n\n        function createDTS() {\n            var templateFilename = require.resolve('octalbonescript').replace('index.js',\n                'dts/' + template + '_template.dts');\n            debug('Copying template: ' + templateFilename);\n            var dts = fs.readFileSync(templateFilename, 'utf8');\n            try {\n                fs.writeFileSync(dtsFilename, dts, 'ascii');\n            } catch (ex) {\n                throw new verror(ex, 'Error writing  %s', dtsFilename);\n            }\n            onDTSWrite();\n        }\n\n        function onDTSWrite() {\n            debug('Compiling dts file');\n            var command = 'dtc -O dtb -o ' + dtboFilename + ' -b 0 -@ ' + dtsFilename;\n            var result = exec(command);\n\n            if (result.code !== 0) {\n                throw new verror(result.output, \" Compiling of dts file failed.\");\n            }\n\n            onDTBOExists();\n        }\n\n        function onDTBOExists() {\n            debug('onDTBOExists()');\n            if (load) module.exports.load_dt_sync(template);\n        }\n        return true;\n    },\n\n    // Note, this just makes sure there was an attempt to load the\n    // devicetree fragment, not if it was successful\n\n    load_dt_sync: function(name) {\n        debug('load_dt_sync(' + [name] + ')');\n        var slotsFile;\n        var err;\n        var readAttempts = 0;\n\n        var capemgr = module.exports.is_capemgr();\n        onFindCapeMgr({\n            path: capemgr\n        });\n\n        function onFindCapeMgr(x) {\n            debug('onFindCapeMgr: path = ' + x.path);\n            if (typeof x.path == 'undefined') {\n                throw new verror(\"CapeMgr not found \");\n            }\n            slotsFile = x.path + '/slots';\n            readSlots();\n        }\n\n        function readSlots() {\n            var slots;\n            try {\n                slots = fs.readFileSync(slotsFile, 'ascii');\n                debug('Triying to read the file' + slotsFile);\n            } catch (ex) {\n                err = ex;\n            }\n            onReadSlots(err, slots);\n        }\n\n        function onReadSlots(err, slots) {\n            readAttempts++;\n            if (err) {\n                throw new verror(err, 'Unable to read from CapeMgr slots');\n            }\n            var index = slots.indexOf(name);\n            debug(slots + \" \" + name);\n            debug('onReadSlots: index = ' + index + ', readAttempts = ' + readAttempts);\n            if (index >= 0) {\n                debug(name + \" is successfully loaded\"); // do nothing...\n            } else if (readAttempts <= 1) {\n                // Attempt to load fragment\n                try {\n                    debug('Writing ' + name + ' to ' + slotsFile);\n                    fs.writeFileSync(slotsFile, name, 'ascii');\n                } catch (ex) {\n                    err = ex;\n                }\n                onWriteSlots(err);\n            } else {\n                err = 'Error waiting for CapeMgr slot to load';\n                throw new verror(err);\n            }\n        }\n\n        function onWriteSlots(err) {\n            if (err) {\n                throw new verror(err, 'Write to CapeMgr slots failed');\n            }\n            readSlots();\n        }\n\n        debug('load_dt_sync return');\n        return true;\n    }\n\n    /*\n\n    wrapCall: function(m, func, funcArgs, cbArgs) {\n        if (!m.module.exists) {\n            debug(m.name + ' support module not loaded.');\n            return (function() {});\n        }\n        funcArgs.unshift('port');\n        funcArgs.push('callback');\n        var newFunction = function() {\n            var args = [];\n            var port = arguments[0];\n            var callback = false;\n            for (var i = 1; i < arguments.length; i++) {\n                debug('Adding argument ' + funcArgs[i] + ' to wrapper');\n                if (funcArgs[i] == 'callback') {\n                    callback = arguments[i];\n                    var wrappedCallback = function() {\n                        var cbData = {};\n                        for (var j = 0; j < cbArgs.length; j++) {\n                            cbData[cbArgs[j]] = arguments[j];\n                        }\n                        cbData.event = 'callback';\n                        debug('cbData = ' + JSON.stringify(cbData));\n                        callback(cbData);\n                    };\n                    args.push(wrappedCallback);\n                } else {\n                    args.push(arguments[i]);\n                }\n            }\n            if (!m.openPorts[port]) {\n                if (callback) callback({\n                    'err': m.name + ' ' + port + ' not opened'\n                });\n                return (false);\n            }\n            debug('Calling ' + m.name + '[' + port + '].' + func + '(' + args + ')');\n            var x = m.openPorts[port][func].apply(\n                m.openPorts[port], args);\n            if (callback) callback({\n                'event': 'return',\n                'return': x\n            });\n            return (x);\n        };\n        newFunction.args = funcArgs;\n        return (newFunction);\n    },\n\n    wrapOpen: function(m, openArgs) {\n        if (!m.module.exists) {\n            debug(m.name + ' support module not loaded.');\n            return (function() {});\n        }\n        openArgs.unshift('port');\n        openArgs.push('callback');\n        var newFunction = function() {\n            var args = {};\n            for (var i = 0; i < openArgs.length; i++) {\n                args[openArgs[i]] = arguments[i];\n            }\n            var port = args.port;\n            var callback = args.callback;\n            debug(m.name + ' opened with ' + JSON.stringify(arguments));\n            if (m.ports[port] && m.ports[port].devicetree) {\n                var fragment = m.ports[port].devicetree;\n                if (!module.exports.is_capemgr()) {\n                    if (callback) callback({\n                        err: 'Kernel does not include CapeMgr module'\n                    });\n                    return (false);\n                }\n                if (!module.exports.load_dt(fragment)) {\n                    if (callback) callback({\n                        'err': 'Devicetree overlay fragment ' +\n                            fragment + ' not loaded'\n                    });\n                    return (false);\n                }\n            }\n            m.openPorts[port] = m.doOpen(args);\n            if (!m.openPorts[port]) {\n                if (callback) callback({\n                    'err': 'Unable to ' + m.name\n                });\n                return (false);\n            }\n            for (var e in m.events) {\n                var addHandler = function(m, port, e) {\n                    var handler = function() {\n                        var myargs = arguments;\n                        myargs.event = e;\n                        for (var i = 0; i < arguments.length; i++) {\n                            myargs[m.events[e][i]] = arguments[i];\n                        }\n                        callback(myargs);\n                    };\n                    m.openPorts[port].on(e, handler);\n                };\n                addHandler(m, port, e);\n            }\n            if (callback) callback({\n                'event': 'return',\n                'value': true\n            });\n            return (true);\n        };\n        newFunction.args = openArgs;\n        return (newFunction);\n    },\n\n    this is async code for loading capes. Can be removed at later stage\n\n    create_dt : function(pin, data, template, load, force_create, resp, callback) {\n        debug('create_dt(' + [pin.key, data, template, load, force_create, JSON.stringify(resp)] + ')');\n\n        template = template || 'bspm';\n        load = (typeof load === 'undefined') ? true : load;\n        var fragment = template;\n        var dtsFilename = '/lib/firmware/' + fragment + '-00A0.dts';\n        var dtboFilename = '/lib/firmware/' + fragment + '-00A0.dtbo';\n\n        if(force_create) {\n            createDTS();\n        } else {\n            fs.exists(dtboFilename, onDTBOExistsTest);\n        }\n\n        function onDTBOExistsTest(exists) {\n            if(exists) {\n                onDTBOExists();\n            } else {\n                createDTS();\n            }\n        }\n\n        function createDTS() {\n            var templateFilename = require.resolve('octalbonescript').replace('index.js',\n                'dts/' + template + '_template.dts');\n            debug('Creating template: ' + templateFilename);\n            var dts = fs.readFileSync(templateFilename, 'utf8');\n            dts = dts.replace(/!PIN_KEY!/g, pin.key);\n            dts = dts.replace(/!PIN_DOT_KEY!/g, pin.key.replace(/_/, '.'));\n            dts = dts.replace(/!PIN_FUNCTION!/g, pin.options[data&7]);\n            dts = dts.replace(/!PIN_OFFSET!/g, pin.muxRegOffset);\n            dts = dts.replace(/!DATA!/g, '0x' + data.toString(16));\n            if(pin.pwm) {\n                dts = dts.replace(/!PWM_MODULE!/g, pin.pwm.module);\n                dts = dts.replace(/!PWM_INDEX!/g, pin.pwm.index);\n                dts = dts.replace(/!DUTY_CYCLE!/g, 500000);\n            }\n            fs.writeFile(dtsFilename, dts, 'ascii', onDTSWrite);\n        }\n\n        function onDTSWrite(err) {\n            if(err) {\n                resp.err = 'Error writing ' + dtsFilename + ': ' + err;\n                debug(resp.err);\n                callback(resp);\n                return;\n            }\n            var command = 'dtc -O dtb -o ' + dtboFilename + ' -b 0 -@ ' + dtsFilename;\n            child_process.exec(command, dtcHandler);\n        }\n\n        function dtcHandler(error, stdout, stderr) {\n            debug('dtcHandler: ' +\n                JSON.stringify({error:error, stdout:stdout, stderr:stderr}));\n            if(!error) onDTBOExists();\n        }\n\n        function onDTBOExists() {\n            debug('onDTBOExists()');\n            if(load) module.exports.load_dt(fragment, pin, resp, callback);\n            else callback(resp);\n        }\n    },\n\n    load_dt : function(name, pin, resp, callback) {\n        debug('load_dt(' + [name, pin ? pin.key : null, JSON.stringify(resp)] + ')');\n        resp = resp || {};\n        var slotsFile;\n        var lastSlots;\n        var writeAttempts = 0;\n        var readAttempts = 0;\n        if(pin) {\n            var slotRegex = new RegExp('\\\\d+(?=\\\\s*:.*,bs.*' + pin.key + ')', 'gm');\n        }\n        module.exports.is_capemgr(onFindCapeMgr);\n\n        function onFindCapeMgr(x) {\n            debug('onFindCapeMgr: path = ' + x.path);\n            if(typeof x.path == 'undefined') {\n                resp.err = \"CapeMgr not found: \" + x.err;\n                console.error(resp.err);\n                callback(resp);\n                return false;\n            }\n            slotsFile = x.path + '/slots';\n            fs.readFile(slotsFile, 'ascii', onReadSlots);\n        }\n\n        function onReadSlots(err, slots) {\n            readAttempts++;\n            if(err) {\n                resp.err = 'Unable to read from CapeMgr slots: ' + err;\n                console.error(resp.err);\n                callback(resp);\n                return false;\n            }\n            lastSlots = slots;\n            var index = slots.indexOf(name);\n            debug('onReadSlots: index = ' + index + ', readAttempts = ' + readAttempts);\n            if(index >= 0) {\n                // Fragment is already loaded\n                if(typeof callback == 'function') callback(resp);\n                return true;\n            } else if (readAttempts <= 1) {\n                // Attempt to load fragment\n                fs.writeFile(slotsFile, name, 'ascii', onWriteSlots);\n            } else {\n                resp.err = 'Error waiting for CapeMgr slot to load';\n                if(typeof callback == 'function') callback(resp);\n            }\n        }\n\n        function onWriteSlots(err) {\n            writeAttempts++;\n            if(err) {\n                resp.err = 'Write to CapeMgr slots failed: ' + err;\n                if(pin && writeAttempts <= 1) unloadSlot();\n                else callback(resp);\n                return false;\n            }\n            setTimeout(function(){ //give some time to load slots after updating slots file.\n                fs.readFile(slotsFile, 'ascii', onReadSlots);\n            },100);\n        }\n\n        function unloadSlot() {\n            debug('unloadSlot()');\n            var slot = lastSlots.match(slotRegex);\n            if(slot && slot[0]) {\n                debug('Attempting to unload conflicting slot ' +\n                    slot[0] + ' for ' + name);\n                debug('Actually did not attempt because of kernel panic problem');\n                //fs.writeFile(slotsFile, '-'+slot[0], 'ascii', onUnloadSlot);\n                // above line is commented because kernel panic is there when slot is unloaded.\n                onUnloadSlot(null);\n            } else {\n                if(typeof callback =='function') callback(resp);\n            }\n        }\n\n        function onUnloadSlot(err) {\n            if(err) {\n                resp.err = \"Unable to unload conflicting slot: \" + err;\n                if(typeof callback =='function') callback(resp);\n                return false;\n            }\n            fs.writeFile(slotsFile, name, 'ascii', onWriteSlots);\n        }\n    }\n\n    */\n\n};\n","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":239,"column":20},"end":{"row":239,"column":21},"action":"insert","lines":["d"],"id":41}],[{"start":{"row":239,"column":21},"end":{"row":239,"column":22},"action":"insert","lines":["e"],"id":42}],[{"start":{"row":239,"column":22},"end":{"row":239,"column":23},"action":"insert","lines":["b"],"id":43}],[{"start":{"row":239,"column":23},"end":{"row":239,"column":24},"action":"insert","lines":["u"],"id":44}],[{"start":{"row":239,"column":24},"end":{"row":239,"column":25},"action":"insert","lines":["g"],"id":45}],[{"start":{"row":239,"column":25},"end":{"row":239,"column":27},"action":"insert","lines":["()"],"id":46}],[{"start":{"row":219,"column":60},"end":{"row":220,"column":0},"action":"insert","lines":["",""],"id":47},{"start":{"row":220,"column":0},"end":{"row":220,"column":16},"action":"insert","lines":["                "]}],[{"start":{"row":220,"column":16},"end":{"row":220,"column":17},"action":"insert","lines":["c"],"id":48}],[{"start":{"row":220,"column":17},"end":{"row":220,"column":18},"action":"insert","lines":["o"],"id":49}],[{"start":{"row":220,"column":18},"end":{"row":220,"column":19},"action":"insert","lines":["n"],"id":50}],[{"start":{"row":220,"column":19},"end":{"row":220,"column":20},"action":"insert","lines":["s"],"id":51}],[{"start":{"row":220,"column":20},"end":{"row":220,"column":21},"action":"insert","lines":["o"],"id":52}],[{"start":{"row":220,"column":16},"end":{"row":220,"column":21},"action":"remove","lines":["conso"],"id":53},{"start":{"row":220,"column":16},"end":{"row":220,"column":23},"action":"insert","lines":["console"]}],[{"start":{"row":220,"column":22},"end":{"row":220,"column":23},"action":"remove","lines":["e"],"id":54}],[{"start":{"row":220,"column":21},"end":{"row":220,"column":22},"action":"remove","lines":["l"],"id":55}],[{"start":{"row":220,"column":20},"end":{"row":220,"column":21},"action":"remove","lines":["o"],"id":56}],[{"start":{"row":220,"column":19},"end":{"row":220,"column":20},"action":"remove","lines":["s"],"id":57}],[{"start":{"row":220,"column":18},"end":{"row":220,"column":19},"action":"remove","lines":["n"],"id":58}],[{"start":{"row":220,"column":17},"end":{"row":220,"column":18},"action":"remove","lines":["o"],"id":59}],[{"start":{"row":220,"column":16},"end":{"row":220,"column":17},"action":"remove","lines":["c"],"id":60}],[{"start":{"row":220,"column":16},"end":{"row":220,"column":17},"action":"insert","lines":["d"],"id":61}],[{"start":{"row":220,"column":17},"end":{"row":220,"column":18},"action":"insert","lines":["e"],"id":62}],[{"start":{"row":220,"column":18},"end":{"row":220,"column":19},"action":"insert","lines":["b"],"id":63}],[{"start":{"row":220,"column":19},"end":{"row":220,"column":20},"action":"insert","lines":["u"],"id":64}],[{"start":{"row":220,"column":20},"end":{"row":220,"column":21},"action":"insert","lines":["g"],"id":65}],[{"start":{"row":220,"column":21},"end":{"row":220,"column":23},"action":"insert","lines":["()"],"id":66}],[{"start":{"row":220,"column":22},"end":{"row":220,"column":24},"action":"insert","lines":["''"],"id":67}],[{"start":{"row":220,"column":23},"end":{"row":220,"column":24},"action":"insert","lines":["T"],"id":68}],[{"start":{"row":220,"column":24},"end":{"row":220,"column":25},"action":"insert","lines":["r"],"id":69}],[{"start":{"row":220,"column":25},"end":{"row":220,"column":26},"action":"insert","lines":["i"],"id":70}],[{"start":{"row":220,"column":26},"end":{"row":220,"column":27},"action":"insert","lines":["y"],"id":71}],[{"start":{"row":220,"column":27},"end":{"row":220,"column":28},"action":"insert","lines":["i"],"id":72}],[{"start":{"row":220,"column":28},"end":{"row":220,"column":29},"action":"insert","lines":["n"],"id":73}],[{"start":{"row":220,"column":29},"end":{"row":220,"column":30},"action":"insert","lines":["g"],"id":74}],[{"start":{"row":220,"column":30},"end":{"row":220,"column":31},"action":"insert","lines":[" "],"id":75}],[{"start":{"row":220,"column":31},"end":{"row":220,"column":32},"action":"insert","lines":["t"],"id":76}],[{"start":{"row":220,"column":32},"end":{"row":220,"column":33},"action":"insert","lines":["o"],"id":77}],[{"start":{"row":220,"column":33},"end":{"row":220,"column":34},"action":"insert","lines":[" "],"id":78}],[{"start":{"row":220,"column":34},"end":{"row":220,"column":35},"action":"insert","lines":["r"],"id":79}],[{"start":{"row":220,"column":35},"end":{"row":220,"column":36},"action":"insert","lines":["e"],"id":80}],[{"start":{"row":220,"column":36},"end":{"row":220,"column":37},"action":"insert","lines":["a"],"id":81}],[{"start":{"row":220,"column":37},"end":{"row":220,"column":38},"action":"insert","lines":["d"],"id":82}],[{"start":{"row":220,"column":38},"end":{"row":220,"column":39},"action":"insert","lines":[" "],"id":83}],[{"start":{"row":220,"column":40},"end":{"row":220,"column":41},"action":"insert","lines":[" "],"id":84}],[{"start":{"row":220,"column":41},"end":{"row":220,"column":42},"action":"insert","lines":["+"],"id":85}],[{"start":{"row":220,"column":42},"end":{"row":220,"column":43},"action":"insert","lines":[" "],"id":86}],[{"start":{"row":220,"column":43},"end":{"row":220,"column":44},"action":"insert","lines":["s"],"id":87}],[{"start":{"row":220,"column":44},"end":{"row":220,"column":45},"action":"insert","lines":["l"],"id":88}],[{"start":{"row":220,"column":43},"end":{"row":220,"column":45},"action":"remove","lines":["sl"],"id":89},{"start":{"row":220,"column":43},"end":{"row":220,"column":52},"action":"insert","lines":["slotsFile"]}],[{"start":{"row":220,"column":52},"end":{"row":220,"column":53},"action":"insert","lines":[" "],"id":90}],[{"start":{"row":220,"column":53},"end":{"row":220,"column":54},"action":"insert","lines":["+"],"id":91}],[{"start":{"row":220,"column":53},"end":{"row":220,"column":54},"action":"remove","lines":["+"],"id":92}],[{"start":{"row":220,"column":52},"end":{"row":220,"column":53},"action":"remove","lines":[" "],"id":93}],[{"start":{"row":220,"column":39},"end":{"row":220,"column":40},"action":"insert","lines":["t"],"id":94}],[{"start":{"row":220,"column":40},"end":{"row":220,"column":41},"action":"insert","lines":["h"],"id":95}],[{"start":{"row":220,"column":41},"end":{"row":220,"column":42},"action":"insert","lines":["e"],"id":96}],[{"start":{"row":220,"column":42},"end":{"row":220,"column":43},"action":"insert","lines":[" "],"id":97}],[{"start":{"row":220,"column":43},"end":{"row":220,"column":44},"action":"insert","lines":["f"],"id":98}],[{"start":{"row":220,"column":44},"end":{"row":220,"column":45},"action":"insert","lines":["i"],"id":99}],[{"start":{"row":220,"column":45},"end":{"row":220,"column":46},"action":"insert","lines":["l"],"id":100}],[{"start":{"row":220,"column":46},"end":{"row":220,"column":47},"action":"insert","lines":["e"],"id":101}],[{"start":{"row":220,"column":43},"end":{"row":220,"column":47},"action":"remove","lines":["file"],"id":102},{"start":{"row":220,"column":43},"end":{"row":220,"column":47},"action":"insert","lines":["file"]}],[{"start":{"row":220,"column":61},"end":{"row":220,"column":62},"action":"insert","lines":[";"],"id":103}],[{"start":{"row":232,"column":44},"end":{"row":233,"column":0},"action":"insert","lines":["",""],"id":104},{"start":{"row":233,"column":0},"end":{"row":233,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":233,"column":12},"end":{"row":233,"column":13},"action":"insert","lines":["d"],"id":105}],[{"start":{"row":233,"column":13},"end":{"row":233,"column":14},"action":"insert","lines":["e"],"id":106}],[{"start":{"row":233,"column":14},"end":{"row":233,"column":15},"action":"insert","lines":["b"],"id":107}],[{"start":{"row":233,"column":15},"end":{"row":233,"column":16},"action":"insert","lines":["u"],"id":108}],[{"start":{"row":233,"column":16},"end":{"row":233,"column":17},"action":"insert","lines":["g"],"id":109}],[{"start":{"row":233,"column":17},"end":{"row":233,"column":19},"action":"insert","lines":["()"],"id":110}],[{"start":{"row":233,"column":18},"end":{"row":233,"column":20},"action":"insert","lines":["''"],"id":111}],[{"start":{"row":233,"column":19},"end":{"row":233,"column":20},"action":"remove","lines":["'"],"id":112}],[{"start":{"row":233,"column":18},"end":{"row":233,"column":19},"action":"remove","lines":["'"],"id":113}],[{"start":{"row":233,"column":18},"end":{"row":233,"column":19},"action":"insert","lines":["i"],"id":114}],[{"start":{"row":233,"column":19},"end":{"row":233,"column":20},"action":"insert","lines":["n"],"id":115}],[{"start":{"row":233,"column":20},"end":{"row":233,"column":21},"action":"insert","lines":["d"],"id":116}],[{"start":{"row":233,"column":21},"end":{"row":233,"column":22},"action":"insert","lines":["e"],"id":117}],[{"start":{"row":233,"column":22},"end":{"row":233,"column":23},"action":"insert","lines":["x"],"id":118}],[{"start":{"row":233,"column":18},"end":{"row":233,"column":23},"action":"remove","lines":["index"],"id":119},{"start":{"row":233,"column":18},"end":{"row":233,"column":23},"action":"insert","lines":["index"]}],[{"start":{"row":233,"column":24},"end":{"row":233,"column":25},"action":"insert","lines":[";"],"id":120}],[{"start":{"row":233,"column":18},"end":{"row":233,"column":23},"action":"remove","lines":["index"],"id":121},{"start":{"row":233,"column":18},"end":{"row":233,"column":19},"action":"insert","lines":["n"]}],[{"start":{"row":233,"column":19},"end":{"row":233,"column":20},"action":"insert","lines":["a"],"id":122}],[{"start":{"row":233,"column":20},"end":{"row":233,"column":21},"action":"insert","lines":["m"],"id":123}],[{"start":{"row":233,"column":21},"end":{"row":233,"column":22},"action":"insert","lines":["e"],"id":124}],[{"start":{"row":233,"column":18},"end":{"row":233,"column":22},"action":"remove","lines":["name"],"id":125},{"start":{"row":233,"column":18},"end":{"row":233,"column":22},"action":"insert","lines":["name"]}],[{"start":{"row":233,"column":18},"end":{"row":233,"column":19},"action":"insert","lines":["s"],"id":126}],[{"start":{"row":233,"column":19},"end":{"row":233,"column":20},"action":"insert","lines":["l"],"id":127}],[{"start":{"row":233,"column":20},"end":{"row":233,"column":21},"action":"insert","lines":["o"],"id":128}],[{"start":{"row":233,"column":21},"end":{"row":233,"column":22},"action":"insert","lines":["t"],"id":129}],[{"start":{"row":233,"column":22},"end":{"row":233,"column":23},"action":"insert","lines":["s"],"id":130}],[{"start":{"row":233,"column":23},"end":{"row":233,"column":24},"action":"insert","lines":[" "],"id":131}],[{"start":{"row":233,"column":24},"end":{"row":233,"column":25},"action":"insert","lines":["+"],"id":132}],[{"start":{"row":233,"column":25},"end":{"row":233,"column":26},"action":"insert","lines":[" "],"id":133}],[{"start":{"row":233,"column":26},"end":{"row":233,"column":27},"action":"insert","lines":["\""],"id":134}],[{"start":{"row":233,"column":27},"end":{"row":233,"column":28},"action":"insert","lines":["\""],"id":135}],[{"start":{"row":233,"column":27},"end":{"row":233,"column":28},"action":"insert","lines":[" "],"id":136}],[{"start":{"row":233,"column":29},"end":{"row":233,"column":30},"action":"insert","lines":[" "],"id":137}],[{"start":{"row":233,"column":30},"end":{"row":233,"column":31},"action":"insert","lines":["+"],"id":138}],[{"start":{"row":233,"column":31},"end":{"row":233,"column":32},"action":"insert","lines":[" "],"id":139}],[{"start":{"row":241,"column":0},"end":{"row":241,"column":27},"action":"remove","lines":["                    debug()"],"id":140}],[{"start":{"row":240,"column":66},"end":{"row":241,"column":0},"action":"remove","lines":["",""],"id":141}]]},"ace":{"folds":[],"scrolltop":3644,"scrollleft":0,"selection":{"start":{"row":236,"column":73},"end":{"row":236,"column":73},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":241,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1442600425000}